// Code generated by protoc-gen-go.
// source: rbft.proto
// DO NOT EDIT!

/*
Package rbft is a generated protocol buffer package.

It is generated from these files:
	rbft.proto

It has these top-level messages:
	MultiChainMessage
	Message
	Request
	RequestBatch
	PrePrepare
	Prepare
	Commit
	Checkpoint
	PQ
	PQSet
	ViewChange
	NewView
	FetchRequestBatch
	Hello
	SeqView
	Signed
	BftMetadata
	Handshake
*/
package rbft

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MultiChainMessage struct {
	ChainID string   `protobuf:"bytes,1,opt,name=chainID" json:"chainID,omitempty"`
	Msg     *Message `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *MultiChainMessage) Reset()                    { *m = MultiChainMessage{} }
func (m *MultiChainMessage) String() string            { return proto.CompactTextString(m) }
func (*MultiChainMessage) ProtoMessage()               {}
func (*MultiChainMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MultiChainMessage) GetMsg() *Message {
	if m != nil {
		return m.Msg
	}
	return nil
}

type Message struct {
	// Types that are valid to be assigned to Payload:
	//	*Message_RequestBatch
	//	*Message_PrePrepare
	//	*Message_Prepare
	//	*Message_Commit
	//	*Message_Checkpoint
	//	*Message_ViewChange
	//	*Message_NewView
	//	*Message_FetchRequestBatch
	//	*Message_ReturnRequestBatch
	//	*Message_Hello
	Payload isMessage_Payload `protobuf_oneof:"payload"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isMessage_Payload interface {
	isMessage_Payload()
}

type Message_RequestBatch struct {
	RequestBatch *RequestBatch `protobuf:"bytes,1,opt,name=request_batch,json=requestBatch,oneof"`
}
type Message_PrePrepare struct {
	PrePrepare *PrePrepare `protobuf:"bytes,2,opt,name=pre_prepare,json=prePrepare,oneof"`
}
type Message_Prepare struct {
	Prepare *Prepare `protobuf:"bytes,3,opt,name=prepare,oneof"`
}
type Message_Commit struct {
	Commit *Commit `protobuf:"bytes,4,opt,name=commit,oneof"`
}
type Message_Checkpoint struct {
	Checkpoint *Checkpoint `protobuf:"bytes,5,opt,name=checkpoint,oneof"`
}
type Message_ViewChange struct {
	ViewChange *ViewChange `protobuf:"bytes,6,opt,name=view_change,json=viewChange,oneof"`
}
type Message_NewView struct {
	NewView *NewView `protobuf:"bytes,7,opt,name=new_view,json=newView,oneof"`
}
type Message_FetchRequestBatch struct {
	FetchRequestBatch *FetchRequestBatch `protobuf:"bytes,8,opt,name=fetch_request_batch,json=fetchRequestBatch,oneof"`
}
type Message_ReturnRequestBatch struct {
	ReturnRequestBatch *RequestBatch `protobuf:"bytes,9,opt,name=return_request_batch,json=returnRequestBatch,oneof"`
}
type Message_Hello struct {
	Hello *Hello `protobuf:"bytes,10,opt,name=hello,oneof"`
}

func (*Message_RequestBatch) isMessage_Payload()       {}
func (*Message_PrePrepare) isMessage_Payload()         {}
func (*Message_Prepare) isMessage_Payload()            {}
func (*Message_Commit) isMessage_Payload()             {}
func (*Message_Checkpoint) isMessage_Payload()         {}
func (*Message_ViewChange) isMessage_Payload()         {}
func (*Message_NewView) isMessage_Payload()            {}
func (*Message_FetchRequestBatch) isMessage_Payload()  {}
func (*Message_ReturnRequestBatch) isMessage_Payload() {}
func (*Message_Hello) isMessage_Payload()              {}

func (m *Message) GetPayload() isMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Message) GetRequestBatch() *RequestBatch {
	if x, ok := m.GetPayload().(*Message_RequestBatch); ok {
		return x.RequestBatch
	}
	return nil
}

func (m *Message) GetPrePrepare() *PrePrepare {
	if x, ok := m.GetPayload().(*Message_PrePrepare); ok {
		return x.PrePrepare
	}
	return nil
}

func (m *Message) GetPrepare() *Prepare {
	if x, ok := m.GetPayload().(*Message_Prepare); ok {
		return x.Prepare
	}
	return nil
}

func (m *Message) GetCommit() *Commit {
	if x, ok := m.GetPayload().(*Message_Commit); ok {
		return x.Commit
	}
	return nil
}

func (m *Message) GetCheckpoint() *Checkpoint {
	if x, ok := m.GetPayload().(*Message_Checkpoint); ok {
		return x.Checkpoint
	}
	return nil
}

func (m *Message) GetViewChange() *ViewChange {
	if x, ok := m.GetPayload().(*Message_ViewChange); ok {
		return x.ViewChange
	}
	return nil
}

func (m *Message) GetNewView() *NewView {
	if x, ok := m.GetPayload().(*Message_NewView); ok {
		return x.NewView
	}
	return nil
}

func (m *Message) GetFetchRequestBatch() *FetchRequestBatch {
	if x, ok := m.GetPayload().(*Message_FetchRequestBatch); ok {
		return x.FetchRequestBatch
	}
	return nil
}

func (m *Message) GetReturnRequestBatch() *RequestBatch {
	if x, ok := m.GetPayload().(*Message_ReturnRequestBatch); ok {
		return x.ReturnRequestBatch
	}
	return nil
}

func (m *Message) GetHello() *Hello {
	if x, ok := m.GetPayload().(*Message_Hello); ok {
		return x.Hello
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_RequestBatch)(nil),
		(*Message_PrePrepare)(nil),
		(*Message_Prepare)(nil),
		(*Message_Commit)(nil),
		(*Message_Checkpoint)(nil),
		(*Message_ViewChange)(nil),
		(*Message_NewView)(nil),
		(*Message_FetchRequestBatch)(nil),
		(*Message_ReturnRequestBatch)(nil),
		(*Message_Hello)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// payload
	switch x := m.Payload.(type) {
	case *Message_RequestBatch:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RequestBatch); err != nil {
			return err
		}
	case *Message_PrePrepare:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PrePrepare); err != nil {
			return err
		}
	case *Message_Prepare:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Prepare); err != nil {
			return err
		}
	case *Message_Commit:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Commit); err != nil {
			return err
		}
	case *Message_Checkpoint:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Checkpoint); err != nil {
			return err
		}
	case *Message_ViewChange:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ViewChange); err != nil {
			return err
		}
	case *Message_NewView:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewView); err != nil {
			return err
		}
	case *Message_FetchRequestBatch:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FetchRequestBatch); err != nil {
			return err
		}
	case *Message_ReturnRequestBatch:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReturnRequestBatch); err != nil {
			return err
		}
	case *Message_Hello:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hello); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Message.Payload has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 1: // payload.request_batch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestBatch)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_RequestBatch{msg}
		return true, err
	case 2: // payload.pre_prepare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PrePrepare)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_PrePrepare{msg}
		return true, err
	case 3: // payload.prepare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Prepare)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_Prepare{msg}
		return true, err
	case 4: // payload.commit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Commit)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_Commit{msg}
		return true, err
	case 5: // payload.checkpoint
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Checkpoint)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_Checkpoint{msg}
		return true, err
	case 6: // payload.view_change
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ViewChange)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_ViewChange{msg}
		return true, err
	case 7: // payload.new_view
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NewView)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_NewView{msg}
		return true, err
	case 8: // payload.fetch_request_batch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FetchRequestBatch)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_FetchRequestBatch{msg}
		return true, err
	case 9: // payload.return_request_batch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestBatch)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_ReturnRequestBatch{msg}
		return true, err
	case 10: // payload.hello
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Hello)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_Hello{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// payload
	switch x := m.Payload.(type) {
	case *Message_RequestBatch:
		s := proto.Size(x.RequestBatch)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PrePrepare:
		s := proto.Size(x.PrePrepare)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Prepare:
		s := proto.Size(x.Prepare)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Commit:
		s := proto.Size(x.Commit)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Checkpoint:
		s := proto.Size(x.Checkpoint)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_ViewChange:
		s := proto.Size(x.ViewChange)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_NewView:
		s := proto.Size(x.NewView)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_FetchRequestBatch:
		s := proto.Size(x.FetchRequestBatch)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_ReturnRequestBatch:
		s := proto.Size(x.ReturnRequestBatch)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Hello:
		s := proto.Size(x.Hello)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Request struct {
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Payload   []byte                     `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	ReplicaId string                     `protobuf:"bytes,3,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	Signature []byte                     `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Request) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type RequestBatch struct {
	Seq   uint64     `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Batch []*Request `protobuf:"bytes,2,rep,name=batch" json:"batch,omitempty"`
}

func (m *RequestBatch) Reset()                    { *m = RequestBatch{} }
func (m *RequestBatch) String() string            { return proto.CompactTextString(m) }
func (*RequestBatch) ProtoMessage()               {}
func (*RequestBatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RequestBatch) GetBatch() []*Request {
	if m != nil {
		return m.Batch
	}
	return nil
}

type PrePrepare struct {
	Seq         *SeqView      `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BatchDigest string        `protobuf:"bytes,2,opt,name=batch_digest,json=batchDigest" json:"batch_digest,omitempty"`
	Batch       *RequestBatch `protobuf:"bytes,3,opt,name=batch" json:"batch,omitempty"`
	ReplicaId   string        `protobuf:"bytes,4,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
}

func (m *PrePrepare) Reset()                    { *m = PrePrepare{} }
func (m *PrePrepare) String() string            { return proto.CompactTextString(m) }
func (*PrePrepare) ProtoMessage()               {}
func (*PrePrepare) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PrePrepare) GetSeq() *SeqView {
	if m != nil {
		return m.Seq
	}
	return nil
}

func (m *PrePrepare) GetBatch() *RequestBatch {
	if m != nil {
		return m.Batch
	}
	return nil
}

type Prepare struct {
	Seq         *SeqView `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BatchDigest string   `protobuf:"bytes,2,opt,name=batch_digest,json=batchDigest" json:"batch_digest,omitempty"`
	ReplicaId   string   `protobuf:"bytes,3,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
}

func (m *Prepare) Reset()                    { *m = Prepare{} }
func (m *Prepare) String() string            { return proto.CompactTextString(m) }
func (*Prepare) ProtoMessage()               {}
func (*Prepare) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Prepare) GetSeq() *SeqView {
	if m != nil {
		return m.Seq
	}
	return nil
}

type Commit struct {
	Seq         *SeqView `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	BatchDigest string   `protobuf:"bytes,2,opt,name=batch_digest,json=batchDigest" json:"batch_digest,omitempty"`
	ReplicaId   string   `protobuf:"bytes,3,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
}

func (m *Commit) Reset()                    { *m = Commit{} }
func (m *Commit) String() string            { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()               {}
func (*Commit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Commit) GetSeq() *SeqView {
	if m != nil {
		return m.Seq
	}
	return nil
}

type Checkpoint struct {
	Seq              *SeqView `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	CheckpointDigest string   `protobuf:"bytes,2,opt,name=checkpoint_digest,json=checkpointDigest" json:"checkpoint_digest,omitempty"`
	Id               string   `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Replica_Id       string   `protobuf:"bytes,4,opt,name=replica_Id,json=replicaId" json:"replica_Id,omitempty"`
}

func (m *Checkpoint) Reset()                    { *m = Checkpoint{} }
func (m *Checkpoint) String() string            { return proto.CompactTextString(m) }
func (*Checkpoint) ProtoMessage()               {}
func (*Checkpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Checkpoint) GetSeq() *SeqView {
	if m != nil {
		return m.Seq
	}
	return nil
}

type PQ struct {
	SeqNo       uint64 `protobuf:"varint,1,opt,name=seq_no,json=seqNo" json:"seq_no,omitempty"`
	View        uint64 `protobuf:"varint,2,opt,name=view" json:"view,omitempty"`
	BatchDigest string `protobuf:"bytes,3,opt,name=batch_digest,json=batchDigest" json:"batch_digest,omitempty"`
}

func (m *PQ) Reset()                    { *m = PQ{} }
func (m *PQ) String() string            { return proto.CompactTextString(m) }
func (*PQ) ProtoMessage()               {}
func (*PQ) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type PQSet struct {
	Set []*PQ `protobuf:"bytes,1,rep,name=set" json:"set,omitempty"`
}

func (m *PQSet) Reset()                    { *m = PQSet{} }
func (m *PQSet) String() string            { return proto.CompactTextString(m) }
func (*PQSet) ProtoMessage()               {}
func (*PQSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PQSet) GetSet() []*PQ {
	if m != nil {
		return m.Set
	}
	return nil
}

type ViewChange struct {
	View         uint64          `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	LowWatermark uint64          `protobuf:"varint,2,opt,name=h" json:"h,omitempty"`
	Cset         []*ViewChange_C `protobuf:"bytes,3,rep,name=cset" json:"cset,omitempty"`
	Pset         []*PQ           `protobuf:"bytes,4,rep,name=pset" json:"pset,omitempty"`
	Qset         []*PQ           `protobuf:"bytes,5,rep,name=qset" json:"qset,omitempty"`
	ReplicaId    string          `protobuf:"bytes,6,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
	Signature    []byte          `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *ViewChange) Reset()                    { *m = ViewChange{} }
func (m *ViewChange) String() string            { return proto.CompactTextString(m) }
func (*ViewChange) ProtoMessage()               {}
func (*ViewChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ViewChange) GetCset() []*ViewChange_C {
	if m != nil {
		return m.Cset
	}
	return nil
}

func (m *ViewChange) GetPset() []*PQ {
	if m != nil {
		return m.Pset
	}
	return nil
}

func (m *ViewChange) GetQset() []*PQ {
	if m != nil {
		return m.Qset
	}
	return nil
}

type ViewChange_C struct {
	SequenceNumber uint64 `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *ViewChange_C) Reset()                    { *m = ViewChange_C{} }
func (m *ViewChange_C) String() string            { return proto.CompactTextString(m) }
func (*ViewChange_C) ProtoMessage()               {}
func (*ViewChange_C) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 0} }

type NewView struct {
	View      uint64            `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	Vset      []*ViewChange     `protobuf:"bytes,2,rep,name=vset" json:"vset,omitempty"`
	Xset      map[uint64]string `protobuf:"bytes,3,rep,name=xset" json:"xset,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ReplicaId string            `protobuf:"bytes,4,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
}

func (m *NewView) Reset()                    { *m = NewView{} }
func (m *NewView) String() string            { return proto.CompactTextString(m) }
func (*NewView) ProtoMessage()               {}
func (*NewView) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *NewView) GetVset() []*ViewChange {
	if m != nil {
		return m.Vset
	}
	return nil
}

func (m *NewView) GetXset() map[uint64]string {
	if m != nil {
		return m.Xset
	}
	return nil
}

type FetchRequestBatch struct {
	BatchDigest string `protobuf:"bytes,1,opt,name=batch_digest,json=batchDigest" json:"batch_digest,omitempty"`
	ReplicaId   string `protobuf:"bytes,2,opt,name=replica_id,json=replicaId" json:"replica_id,omitempty"`
}

func (m *FetchRequestBatch) Reset()                    { *m = FetchRequestBatch{} }
func (m *FetchRequestBatch) String() string            { return proto.CompactTextString(m) }
func (*FetchRequestBatch) ProtoMessage()               {}
func (*FetchRequestBatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type Hello struct {
	Batch   *RequestBatch `protobuf:"bytes,1,opt,name=batch" json:"batch,omitempty"`
	NewView *NewView      `protobuf:"bytes,2,opt,name=new_view,json=newView" json:"new_view,omitempty"`
}

func (m *Hello) Reset()                    { *m = Hello{} }
func (m *Hello) String() string            { return proto.CompactTextString(m) }
func (*Hello) ProtoMessage()               {}
func (*Hello) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Hello) GetBatch() *RequestBatch {
	if m != nil {
		return m.Batch
	}
	return nil
}

func (m *Hello) GetNewView() *NewView {
	if m != nil {
		return m.NewView
	}
	return nil
}

type SeqView struct {
	View  uint64 `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	SeqNo uint64 `protobuf:"varint,2,opt,name=seq_no,json=seqNo" json:"seq_no,omitempty"`
}

func (m *SeqView) Reset()                    { *m = SeqView{} }
func (m *SeqView) String() string            { return proto.CompactTextString(m) }
func (*SeqView) ProtoMessage()               {}
func (*SeqView) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type Signed struct {
	Data      []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Signed) Reset()                    { *m = Signed{} }
func (m *Signed) String() string            { return proto.CompactTextString(m) }
func (*Signed) ProtoMessage()               {}
func (*Signed) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type BftMetadata struct {
	Seq            int64  `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	N              uint64 `protobuf:"varint,2,opt,name=N" json:"N,omitempty"`
	F              uint64 `protobuf:"varint,3,opt,name=F" json:"F,omitempty"`
	K              uint64 `protobuf:"varint,4,opt,name=K" json:"K,omitempty"`
	L              uint64 `protobuf:"varint,5,opt,name=L" json:"L,omitempty"`
	LowWatermark   uint64 `protobuf:"varint,6,opt,name=low_watermark,json=lowWatermark" json:"low_watermark,omitempty"`
	RequestTimeout uint64 `protobuf:"varint,7,opt,name=request_timeout,json=requestTimeout" json:"request_timeout,omitempty"`
}

func (m *BftMetadata) Reset()                    { *m = BftMetadata{} }
func (m *BftMetadata) String() string            { return proto.CompactTextString(m) }
func (*BftMetadata) ProtoMessage()               {}
func (*BftMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type Handshake struct {
}

func (m *Handshake) Reset()                    { *m = Handshake{} }
func (m *Handshake) String() string            { return proto.CompactTextString(m) }
func (*Handshake) ProtoMessage()               {}
func (*Handshake) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func init() {
	proto.RegisterType((*MultiChainMessage)(nil), "rbft.MultiChainMessage")
	proto.RegisterType((*Message)(nil), "rbft.Message")
	proto.RegisterType((*Request)(nil), "rbft.Request")
	proto.RegisterType((*RequestBatch)(nil), "rbft.RequestBatch")
	proto.RegisterType((*PrePrepare)(nil), "rbft.PrePrepare")
	proto.RegisterType((*Prepare)(nil), "rbft.Prepare")
	proto.RegisterType((*Commit)(nil), "rbft.Commit")
	proto.RegisterType((*Checkpoint)(nil), "rbft.Checkpoint")
	proto.RegisterType((*PQ)(nil), "rbft.PQ")
	proto.RegisterType((*PQSet)(nil), "rbft.PQSet")
	proto.RegisterType((*ViewChange)(nil), "rbft.ViewChange")
	proto.RegisterType((*ViewChange_C)(nil), "rbft.ViewChange.C")
	proto.RegisterType((*NewView)(nil), "rbft.NewView")
	proto.RegisterType((*FetchRequestBatch)(nil), "rbft.FetchRequestBatch")
	proto.RegisterType((*Hello)(nil), "rbft.Hello")
	proto.RegisterType((*SeqView)(nil), "rbft.SeqView")
	proto.RegisterType((*Signed)(nil), "rbft.Signed")
	proto.RegisterType((*BftMetadata)(nil), "rbft.BftMetadata")
	proto.RegisterType((*Handshake)(nil), "rbft.handshake")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Consensus service

type ConsensusClient interface {
	Consensus(ctx context.Context, in *Handshake, opts ...grpc.CallOption) (Consensus_ConsensusClient, error)
}

type consensusClient struct {
	cc *grpc.ClientConn
}

func NewConsensusClient(cc *grpc.ClientConn) ConsensusClient {
	return &consensusClient{cc}
}

func (c *consensusClient) Consensus(ctx context.Context, in *Handshake, opts ...grpc.CallOption) (Consensus_ConsensusClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Consensus_serviceDesc.Streams[0], c.cc, "/rbft.consensus/consensus", opts...)
	if err != nil {
		return nil, err
	}
	x := &consensusConsensusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Consensus_ConsensusClient interface {
	Recv() (*MultiChainMessage, error)
	grpc.ClientStream
}

type consensusConsensusClient struct {
	grpc.ClientStream
}

func (x *consensusConsensusClient) Recv() (*MultiChainMessage, error) {
	m := new(MultiChainMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Consensus service

type ConsensusServer interface {
	Consensus(*Handshake, Consensus_ConsensusServer) error
}

func RegisterConsensusServer(s *grpc.Server, srv ConsensusServer) {
	s.RegisterService(&_Consensus_serviceDesc, srv)
}

func _Consensus_Consensus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Handshake)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConsensusServer).Consensus(m, &consensusConsensusServer{stream})
}

type Consensus_ConsensusServer interface {
	Send(*MultiChainMessage) error
	grpc.ServerStream
}

type consensusConsensusServer struct {
	grpc.ServerStream
}

func (x *consensusConsensusServer) Send(m *MultiChainMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _Consensus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rbft.consensus",
	HandlerType: (*ConsensusServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "consensus",
			Handler:       _Consensus_Consensus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("rbft.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1066 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0x29, 0x4a, 0x0a, 0x47, 0x8a, 0x63, 0x6f, 0x53, 0x44, 0x10, 0x52, 0xc4, 0xa5, 0x8b,
	0xd4, 0x6d, 0x00, 0xa9, 0x70, 0x02, 0x34, 0x09, 0x7a, 0xb2, 0x12, 0xc3, 0x46, 0x62, 0xc1, 0x5e,
	0xa7, 0x3f, 0x48, 0x0f, 0x02, 0x45, 0x8d, 0x48, 0x42, 0x14, 0x49, 0x2d, 0x57, 0x56, 0xfd, 0x08,
	0x3d, 0xf4, 0x01, 0xda, 0x73, 0xfb, 0x2e, 0x7d, 0xac, 0x62, 0x77, 0xf9, 0x27, 0xca, 0xb5, 0x2f,
	0x45, 0x6f, 0x9c, 0x9f, 0x6f, 0x66, 0x76, 0xf6, 0x9b, 0x59, 0x02, 0xb0, 0xf1, 0x94, 0xf7, 0x62,
	0x16, 0xf1, 0x88, 0x18, 0xe2, 0xbb, 0xfb, 0xc4, 0x8d, 0x22, 0x37, 0xc0, 0xbe, 0xd4, 0x8d, 0x97,
	0xd3, 0x3e, 0xf7, 0xe7, 0x98, 0x70, 0x7b, 0x1e, 0x2b, 0x37, 0x6b, 0x08, 0xbb, 0x67, 0xcb, 0x80,
	0xfb, 0x03, 0xcf, 0xf6, 0xc3, 0x33, 0x4c, 0x12, 0xdb, 0x45, 0xd2, 0x81, 0xa6, 0x23, 0xe4, 0xd3,
	0x37, 0x1d, 0x6d, 0x4f, 0x3b, 0x30, 0x69, 0x26, 0x92, 0x27, 0x50, 0x9b, 0x27, 0x6e, 0x47, 0xdf,
	0xd3, 0x0e, 0x5a, 0x87, 0xf7, 0x7b, 0x32, 0x5f, 0x8a, 0xa2, 0xc2, 0x62, 0xfd, 0x69, 0x40, 0x33,
	0x0b, 0xf3, 0x0a, 0xee, 0x33, 0x5c, 0x2c, 0x31, 0xe1, 0xa3, 0xb1, 0xcd, 0x1d, 0x4f, 0x06, 0x6b,
	0x1d, 0x12, 0x05, 0xa3, 0xca, 0x74, 0x24, 0x2c, 0x27, 0x5b, 0xb4, 0xcd, 0x4a, 0x32, 0x79, 0x0e,
	0xad, 0x98, 0xe1, 0x28, 0x66, 0x18, 0xdb, 0x0c, 0xd3, 0x7c, 0x3b, 0x0a, 0x78, 0xce, 0xf0, 0x5c,
	0xe9, 0x4f, 0xb6, 0x28, 0xc4, 0xb9, 0x44, 0xbe, 0x82, 0x66, 0x06, 0xa8, 0x95, 0x0b, 0x2c, 0xbc,
	0x33, 0x3b, 0x79, 0x0a, 0x0d, 0x27, 0x9a, 0xcf, 0x7d, 0xde, 0x31, 0xa4, 0x67, 0x5b, 0x79, 0x0e,
	0xa4, 0xee, 0x64, 0x8b, 0xa6, 0x56, 0x72, 0x08, 0xe0, 0x78, 0xe8, 0xcc, 0xe2, 0xc8, 0x0f, 0x79,
	0xa7, 0x5e, 0x2e, 0x63, 0x90, 0xeb, 0x45, 0x19, 0x85, 0x97, 0xa8, 0xfd, 0xca, 0xc7, 0xd5, 0xc8,
	0xf1, 0xec, 0xd0, 0xc5, 0x4e, 0xa3, 0x0c, 0xfa, 0xc1, 0xc7, 0xd5, 0x40, 0xea, 0x05, 0xe8, 0x2a,
	0x97, 0xc8, 0xd7, 0x70, 0x2f, 0xc4, 0xd5, 0x48, 0x68, 0x3a, 0xcd, 0x72, 0xf1, 0x43, 0x5c, 0x09,
	0x90, 0x28, 0x3e, 0x54, 0x9f, 0xe4, 0x14, 0x3e, 0x99, 0x22, 0x77, 0xbc, 0xd1, 0x7a, 0x77, 0xef,
	0x49, 0xd8, 0x23, 0x05, 0x3b, 0x16, 0x0e, 0x95, 0x16, 0xef, 0x4e, 0xab, 0x4a, 0x72, 0x0c, 0x0f,
	0x19, 0xf2, 0x25, 0x0b, 0x2b, 0xb1, 0xcc, 0x5b, 0x6e, 0x8a, 0x28, 0xc4, 0x5a, 0x9c, 0x7d, 0xa8,
	0x7b, 0x18, 0x04, 0x51, 0x07, 0x24, 0xb0, 0xa5, 0x80, 0x27, 0x42, 0x75, 0xb2, 0x45, 0x95, 0xed,
	0xc8, 0x84, 0x66, 0x6c, 0x5f, 0x07, 0x91, 0x3d, 0xb1, 0xfe, 0xd0, 0xa0, 0x99, 0x06, 0x20, 0x2f,
	0xc1, 0xcc, 0x59, 0x99, 0x52, 0xa4, 0xdb, 0x53, 0xbc, 0xed, 0x65, 0xbc, 0xed, 0x7d, 0xc8, 0x3c,
	0x68, 0xe1, 0x2c, 0x78, 0x9a, 0x06, 0x94, 0x0c, 0x69, 0xd3, 0x4c, 0x24, 0x9f, 0x01, 0x30, 0x8c,
	0x03, 0xdf, 0xb1, 0x47, 0xfe, 0x44, 0xb2, 0xc1, 0xa4, 0x66, 0xaa, 0x39, 0x9d, 0x90, 0xc7, 0x60,
	0x26, 0xbe, 0x1b, 0xda, 0x7c, 0xc9, 0x50, 0x32, 0xa0, 0x4d, 0x0b, 0x85, 0xf5, 0x16, 0xda, 0x6b,
	0x87, 0xdb, 0x81, 0x5a, 0x82, 0x0b, 0x59, 0x9a, 0x41, 0xc5, 0xa7, 0x38, 0xae, 0xea, 0x93, 0xbe,
	0x57, 0x2b, 0xae, 0x2a, 0x05, 0x51, 0x65, 0xb3, 0x7e, 0xd7, 0x00, 0x0a, 0xae, 0x8a, 0xd1, 0xc9,
	0xa2, 0xe4, 0x88, 0x4b, 0x5c, 0x88, 0x1b, 0x55, 0x41, 0x3f, 0x87, 0xb6, 0x04, 0x8e, 0x26, 0xbe,
	0x8b, 0x09, 0x97, 0x47, 0x32, 0x69, 0x4b, 0xea, 0xde, 0x48, 0x15, 0x39, 0xc8, 0xf2, 0xd6, 0xfe,
	0xed, 0x7e, 0xd2, 0xe4, 0x95, 0x06, 0x18, 0x95, 0x06, 0x58, 0x01, 0x34, 0xff, 0xcb, 0xba, 0x6e,
	0x6f, 0xb7, 0x35, 0x83, 0x86, 0x9a, 0xac, 0xff, 0x23, 0xd9, 0xaf, 0x1a, 0x40, 0x31, 0x9b, 0x77,
	0x67, 0x7c, 0x06, 0xbb, 0xc5, 0xf0, 0xae, 0xa7, 0xdd, 0x29, 0x0c, 0x69, 0xee, 0x6d, 0xd0, 0xf3,
	0x9c, 0xba, 0xbf, 0xc6, 0xb3, 0xd3, 0x1b, 0xda, 0x4c, 0x41, 0x3f, 0xbf, 0x20, 0x9f, 0x42, 0x23,
	0xc1, 0xc5, 0x28, 0x8c, 0x52, 0x0a, 0xd5, 0x13, 0x5c, 0x0c, 0x23, 0x42, 0xc0, 0x90, 0xe3, 0xae,
	0x4b, 0xa5, 0xfc, 0xde, 0x38, 0x7e, 0x6d, 0xe3, 0xf8, 0xd6, 0x3e, 0xd4, 0xcf, 0x2f, 0x2e, 0x91,
	0x93, 0xae, 0x38, 0x19, 0xef, 0x68, 0x92, 0x82, 0xf7, 0xd2, 0x55, 0x77, 0x21, 0x0e, 0xc5, 0xad,
	0xdf, 0x74, 0x80, 0x62, 0xd7, 0xe4, 0xa9, 0xb4, 0x52, 0xaa, 0x36, 0x68, 0x5e, 0x9a, 0x5b, 0xf3,
	0xc8, 0x53, 0x30, 0x1c, 0x11, 0xad, 0x26, 0xa3, 0x91, 0xea, 0xb6, 0xea, 0x0d, 0xa8, 0xb4, 0x93,
	0xc7, 0x60, 0xc4, 0xc2, 0xcf, 0xa8, 0x64, 0x95, 0x5a, 0x61, 0x5d, 0x08, 0x6b, 0xbd, 0x6a, 0x15,
	0xda, 0xca, 0xc5, 0x35, 0x6e, 0x1d, 0xca, 0x66, 0x65, 0x28, 0xbb, 0xdf, 0x81, 0x36, 0x20, 0x5f,
	0xc2, 0x83, 0x44, 0x90, 0x3d, 0x74, 0x70, 0x14, 0x2e, 0xe7, 0x63, 0x64, 0xe9, 0x91, 0xb6, 0x33,
	0xf5, 0x50, 0x6a, 0xd3, 0x7b, 0xd2, 0xb3, 0x7b, 0xb2, 0xfe, 0xd6, 0xa0, 0x99, 0x6e, 0xd2, 0x1b,
	0x9b, 0xf1, 0x05, 0x18, 0x57, 0xa2, 0x70, 0x35, 0xcf, 0x1b, 0xcb, 0x9a, 0x4a, 0x2b, 0x79, 0x06,
	0xc6, 0x2f, 0x45, 0x93, 0x1e, 0xad, 0x2d, 0xe8, 0xde, 0x4f, 0x09, 0xf2, 0xb7, 0x21, 0x67, 0xd7,
	0x54, 0x3a, 0xdd, 0x31, 0x81, 0xdd, 0x6f, 0xc1, 0xcc, 0x11, 0x62, 0xc3, 0xcc, 0xf0, 0x3a, 0xdb,
	0x30, 0x33, 0xbc, 0x26, 0x0f, 0xa1, 0x7e, 0x65, 0x07, 0x4b, 0x4c, 0xcf, 0xa0, 0x84, 0xd7, 0xfa,
	0x4b, 0xcd, 0xfa, 0x1e, 0x76, 0x37, 0x96, 0xfb, 0x06, 0x6f, 0xb4, 0xbb, 0xc6, 0x46, 0xaf, 0x52,
	0xf5, 0x67, 0xa8, 0xcb, 0x75, 0x5d, 0xec, 0x18, 0xed, 0xae, 0x1d, 0x73, 0x50, 0x7a, 0xb3, 0xf4,
	0x1b, 0xde, 0xac, 0xfc, 0xc5, 0xb2, 0x5e, 0x40, 0x33, 0x9d, 0xb9, 0x1b, 0xbb, 0x5f, 0x0c, 0x88,
	0x5e, 0x1a, 0x10, 0xeb, 0x35, 0x34, 0x2e, 0x7d, 0x37, 0xc4, 0x89, 0x00, 0x4d, 0x6c, 0x6e, 0x4b,
	0x50, 0x9b, 0xca, 0xef, 0x75, 0xba, 0xe8, 0xd5, 0x1d, 0xfe, 0x97, 0x06, 0xad, 0xa3, 0x29, 0x3f,
	0x43, 0x6e, 0x4b, 0xef, 0xd2, 0x0e, 0xaf, 0xa9, 0xb9, 0x6f, 0x83, 0x36, 0xcc, 0xf8, 0x3f, 0x14,
	0xd2, 0xb1, 0x9c, 0x36, 0x83, 0x6a, 0xc7, 0x42, 0x7a, 0x27, 0xaf, 0xcc, 0xa0, 0xda, 0x3b, 0x21,
	0xbd, 0x97, 0x6f, 0xbf, 0x41, 0xb5, 0xf7, 0x64, 0x1f, 0xee, 0x07, 0xd1, 0x6a, 0xb4, 0xb2, 0x39,
	0xb2, 0xb9, 0xcd, 0x66, 0x92, 0xc8, 0x06, 0x6d, 0x07, 0xd1, 0xea, 0xc7, 0x4c, 0x27, 0x88, 0x9a,
	0x3d, 0xa8, 0xe2, 0xb9, 0x8a, 0x96, 0x5c, 0x32, 0xda, 0xa0, 0xdb, 0xa9, 0xfa, 0x83, 0xd2, 0x5a,
	0x2d, 0x30, 0x3d, 0x3b, 0x9c, 0x24, 0x9e, 0x3d, 0xc3, 0xc3, 0x63, 0x30, 0x9d, 0x28, 0x4c, 0x30,
	0x4c, 0x96, 0x09, 0x79, 0x55, 0x16, 0x1e, 0xa8, 0xc6, 0xe6, 0xae, 0xdd, 0x94, 0x7c, 0x1b, 0xff,
	0x6e, 0xd6, 0xd6, 0x37, 0xda, 0xd1, 0x47, 0xb0, 0x22, 0xe6, 0xf6, 0xbc, 0xeb, 0x18, 0x59, 0x80,
	0x13, 0x17, 0x59, 0x6f, 0x6a, 0x8f, 0x99, 0xef, 0xa8, 0xf7, 0x34, 0x91, 0xd8, 0x8f, 0x2f, 0x5c,
	0x9f, 0x7b, 0xcb, 0x71, 0xcf, 0x89, 0xe6, 0xfd, 0x92, 0x6b, 0x5f, 0xb9, 0xf6, 0x23, 0x36, 0x41,
	0x86, 0xac, 0x9f, 0x17, 0xd1, 0x17, 0xa8, 0x71, 0x43, 0x86, 0x78, 0xfe, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x34, 0x2f, 0xe6, 0x01, 0x6c, 0x0a, 0x00, 0x00,
}
