diff --git a/examples/e2e_cli/scripts/script.sh b/examples/e2e_cli/scripts/script.sh
index 6591709..de4d553 100755
--- a/examples/e2e_cli/scripts/script.sh
+++ b/examples/e2e_cli/scripts/script.sh
@@ -90,9 +90,9 @@ instantiateChaincode () {
 	PEER=$1
 	setGlobals $PEER
         if [ -z "$CORE_PEER_TLS_ENABLED" -o "$CORE_PEER_TLS_ENABLED" = "false" ]; then
-		peer chaincode instantiate -o orderer0:7050 -C $CHANNEL_NAME -n mycc -v 1.0 -c '{"Args":["init","a","100","b","200"]}' -P "OR	('Org0MSP.member','Org1MSP.member')" >&log.txt
+		peer chaincode instantiate -C $CHANNEL_NAME -n mycc -v 1.0 -c '{"Args":["init","a","100","b","200"]}' -P "OR	('Org0MSP.member','Org1MSP.member')" >&log.txt
 	else
-		peer chaincode instantiate -o orderer0:7050 --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME -n mycc -v 1.0 -c '{"Args":["init","a","100","b","200"]}' -P "OR	('Org0MSP.member','Org1MSP.member')" >&log.txt
+		peer chaincode instantiate --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME -n mycc -v 1.0 -c '{"Args":["init","a","100","b","200"]}' -P "OR	('Org0MSP.member','Org1MSP.member')" >&log.txt
 	fi
 	res=$?
 	cat log.txt
@@ -132,9 +132,9 @@ chaincodeQuery () {
 chaincodeInvoke () {
         PEER=$1
         if [ -z "$CORE_PEER_TLS_ENABLED" -o "$CORE_PEER_TLS_ENABLED" = "false" ]; then
-		peer chaincode invoke -o orderer0:7050 -C $CHANNEL_NAME -n mycc -c '{"Args":["invoke","a","b","10"]}' >&log.txt
+		peer chaincode invoke -C $CHANNEL_NAME -n mycc -c '{"Args":["invoke","a","b","10"]}' >&log.txt
 	else
-		peer chaincode invoke -o orderer0:7050  --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME -n mycc -c '{"Args":["invoke","a","b","10"]}' >&log.txt
+		peer chaincode invoke --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME -n mycc -c '{"Args":["invoke","a","b","10"]}' >&log.txt
 	fi
 	res=$?
 	cat log.txt
diff --git a/peer/chaincode/common.go b/peer/chaincode/common.go
index 353c8ba..c9e3df2 100644
--- a/peer/chaincode/common.go
+++ b/peer/chaincode/common.go
@@ -24,6 +24,8 @@ import (
 	"strings"
 
 	"github.com/hyperledger/fabric/common/cauthdsl"
+	"github.com/hyperledger/fabric/common/configtx"
+	configtxapi "github.com/hyperledger/fabric/common/configtx/api"
 	"github.com/hyperledger/fabric/core/chaincode"
 	"github.com/hyperledger/fabric/core/chaincode/platforms"
 	"github.com/hyperledger/fabric/core/container"
@@ -206,6 +208,61 @@ func checkChaincodeCmdParams(cmd *cobra.Command) error {
 	return nil
 }
 
+// getOrdererEndpointOfChain returns orderer endpoints of given chain
+func getOrdererEndpointOfChain(chainID string, signer msp.SigningIdentity, endorserClient pb.EndorserClient) ([]string, error) {
+
+	// query cscc for chain config block
+	invocation := &pb.ChaincodeInvocationSpec{
+		ChaincodeSpec: &pb.ChaincodeSpec{
+			Type:        pb.ChaincodeSpec_Type(pb.ChaincodeSpec_Type_value["GOLANG"]),
+			ChaincodeId: &pb.ChaincodeID{Name: "cscc"},
+			Input:       &pb.ChaincodeInput{Args: [][]byte{[]byte("GetConfigBlock"), []byte(chainID)}},
+		},
+	}
+
+	creator, err := signer.Serialize()
+	if err != nil {
+		return nil, fmt.Errorf("Error serializing identity for %s: %s", signer.GetIdentifier(), err)
+	}
+
+	prop, _, err := putils.CreateProposalFromCIS(pcommon.HeaderType_CONFIG, "", invocation, creator)
+	if err != nil {
+		return nil, fmt.Errorf("Error creating GetConfigBlock proposal: %s", err)
+	}
+
+	signedProp, err := putils.GetSignedProposal(prop, signer)
+	if err != nil {
+		return nil, fmt.Errorf("Error creating signed GetConfigBlock proposal: %s",  err)
+	}
+
+	proposalResp, err := endorserClient.ProcessProposal(context.Background(), signedProp)
+	if err != nil {
+		return nil, fmt.Errorf("Error endorsing GetConfigBlock: %s", err)
+	}
+
+	// parse config block
+	block, err := putils.GetBlockFromBlockBytes(proposalResp.Response.Payload)
+	if err != nil {
+		return nil, err
+	}
+
+	envelopeConfig, err := putils.ExtractEnvelope(block, 0)
+	if err != nil {
+		return nil, err
+	}
+	configtxInitializer := configtx.NewInitializer()
+	configtxManager, err := configtx.NewManagerImpl(
+		envelopeConfig,
+		configtxInitializer,
+		[]func(cm configtxapi.Manager){},
+	)
+	if err != nil {
+		return nil, err
+	}
+
+	return configtxManager.ChannelConfig().OrdererAddresses(), nil
+}
+
 // ChaincodeCmdFactory holds the clients used by ChaincodeCmd
 type ChaincodeCmdFactory struct {
 	EndorserClient  pb.EndorserClient
@@ -227,6 +284,15 @@ func InitCmdFactory(isOrdererRequired bool) (*ChaincodeCmdFactory, error) {
 
 	var broadcastClient common.BroadcastClient
 	if isOrdererRequired {
+		if len(orderingEndpoint) == 0 {
+			orderingEndpoints, err := getOrdererEndpointOfChain(chainID, signer, endorserClient)
+			if err != nil || len(orderingEndpoints) == 0 {
+				return nil, fmt.Errorf("Error failed to get (%s) orderer endpoint: %s", chainID, err)
+			}
+			logger.Infof("Get chain(%s) orderer endpoint: %s", chainID, orderingEndpoints[0])
+			orderingEndpoint = orderingEndpoints[0]
+		}
+
 		broadcastClient, err = common.GetBroadcastClient(orderingEndpoint, tls, caFile)
 
 		if err != nil {
diff --git a/peer/chaincode/install_test.go b/peer/chaincode/install_test.go
index f4a51b7..b38716f 100644
--- a/peer/chaincode/install_test.go
+++ b/peer/chaincode/install_test.go
@@ -24,6 +24,10 @@ import (
 	"github.com/hyperledger/fabric/peer/common"
 	pb "github.com/hyperledger/fabric/protos/peer"
 
+	"github.com/hyperledger/fabric/bccsp/factory"
+	genesisconfig "github.com/hyperledger/fabric/common/configtx/tool/localconfig"
+	"github.com/hyperledger/fabric/common/configtx/tool/provisional"
+	"github.com/hyperledger/fabric/protos/utils"
 	"github.com/spf13/cobra"
 	"github.com/spf13/viper"
 )
@@ -130,3 +134,33 @@ func TestInstall(t *testing.T) {
 		t.Fatalf("Install failed with error: %v", err)
 	}
 }
+
+func TestGetOrdererEndpointFromConfigTx(t *testing.T) {
+	initMSP()
+
+	signer, err := common.GetDefaultSigner()
+	if err != nil {
+		t.Errorf(err.Error())
+	}
+
+	mockchain := "mockchain"
+	factory.InitFactories(nil)
+	config := genesisconfig.Load(genesisconfig.SampleInsecureProfile)
+	pgen := provisional.New(config)
+	genesisBlock := pgen.GenesisBlockForChannel(mockchain)
+
+	mockResponse := &pb.ProposalResponse{
+		Response:    &pb.Response{Status: 200, Payload: utils.MarshalOrPanic(genesisBlock)},
+		Endorsement: &pb.Endorsement{},
+	}
+	mockEndorerClient := common.GetMockEndorserClient(mockResponse, nil)
+
+	ordererEndpoints, err := getOrdererEndpointOfChain(mockchain, signer, mockEndorerClient)
+	if err != nil {
+		t.Fatalf(err.Error())
+	}
+
+	if len(ordererEndpoints) != 1 || ordererEndpoints[0] != "127.0.0.1:7050" {
+		t.Fatalf("failed to get ordererEndpoint %v", ordererEndpoints)
+	}
+}
